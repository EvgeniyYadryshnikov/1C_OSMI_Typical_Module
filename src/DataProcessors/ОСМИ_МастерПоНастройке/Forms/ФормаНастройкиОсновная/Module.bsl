#Область ОбработкаСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПроверкаКорректностиИнтеграции() Тогда
		Элементы.СистемаВключена.Видимость = Ложь;
		Если ПолучитьФункциональнуюОпцию("ОСМИ_ПодсистемаВключена") Тогда
			Константы.ОСМИ_ПодсистемаВключена.Установить(Ложь);
		КонецЕсли;
		СистемаВключена = Ложь;
	Иначе
		СистемаВключена = ПолучитьФункциональнуюОпцию("ОСМИ_ПодсистемаВключена");
	КонецЕсли;	
	
	УстановкаВидимостиДоступности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	
	Если СистемаВключена Тогда
		ПодключитьОбработчикОжидания("ПрочитатьСохраненныеНастройки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаHTTPСобытия Тогда
		ПодключитьОбработчикОжидания("ОбновитьПереченьHTTPСобытий", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность ИЛИ МодифицированыНастройкиСоединения И НЕ ЗавершениеРаботы Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьНастройкиОСМИ", ЭтаФорма),
			"Настройки подсистемы ОСМИ изменены. Сохранить новые настройки?", РежимДиалогаВопрос.ДаНетОтмена, 60,
			КодВозвратаДиалога.Отмена, "Внимание!", КодВозвратаДиалога.Отмена); 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаРегламентногоЗаданияПоПроверкеШаблонов

&НаКлиенте
Процедура НастройкаРегламентаПоПроверкиШаблонов(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(СоздатьПолучитьРегламентноеЗадание());
	Диалог.Показать(Новый ОписаниеОповещения("УстановитьРасписаниеПроверкиШаблона", ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРегламентноеЗадание()
	
	Возврат РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные, Предопределенное, Ключ",
		Метаданные.РегламентныеЗадания.ОСМИ_ПроверкаШаблоновКарт, Ложь, "ПроверкаШаблоновКарт"));
	
КонецФункции

&НаСервере
Функция СоздатьПолучитьРегламентноеЗадание()
	
	Задания = ПолучитьРегламентноеЗадание();
	
	Если Задания.Количество() > 0 тогда
		Задание = Задания[0];
	Иначе
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ОСМИ_ПроверкаШаблоновКарт);
		Задание.Ключ = "ПроверкаШаблоновКарт";	
		Задание.Использование = Истина;
		Задание.Наименование = "Проверка шаблонов карт ОСМИ";
		Задание.Записать(); 		
	КонецЕсли;
	
	Возврат Задание.Расписание;
	
КонецФункции

&НаКлиенте
Процедура УстановитьРасписаниеПроверкиШаблона(Расписание, Параметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		ПоказатьПредупреждение(, "Расписание не задано");
	Иначе
		УстановитьРасписаниеПроверкиШаблонаНаСервере(Расписание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеПроверкиШаблонаНаСервере(Расписание) Экспорт
	
	Задания = ПолучитьРегламентноеЗадание();
	
	Если Задания.Количество() > 0 тогда
		Задание = Задания[0];
		Задание.Расписание = Расписание;
		Задание.Записать();		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеНастройкиПараметровОСМИ

&НаКлиенте
Процедура ШаблонПоУмолчаниюПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕмаилАдминистратораПриИзменении(Элемент)

	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеШаблонами

&НаСервере
Процедура ЗагрузитьШаблоныНаСервере()
	
	СписокШаблонов = ОСМИ_РаботаСAPI.ЗапроситьСписокДоступныхШаблонов();
	Если СписокШаблонов.Успех Тогда
		Для Каждого ШаблонОСМИ Из СписокШаблонов.Ответ.templates Цикл
			Шаблон = Справочники.ОСМИ_ШаблоныЭлектронныхКарт.НайтиПоНаименованию(ШаблонОСМИ, Истина);
			Если Шаблон = Неопределено ИЛИ
				Шаблон = Справочники.ОСМИ_ШаблоныЭлектронныхКарт.ПустаяСсылка() Тогда 
				НовыйШаблон = Справочники.ОСМИ_ШаблоныЭлектронныхКарт.СоздатьЭлемент();
				НовыйШаблон.Наименование = ШаблонОСМИ;
				НовыйШаблон.ОбновитьССервера();
				НовыйШаблон.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблоны(Команда)
	
	ЗагрузитьШаблоныНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ВключениеОтключениеПодсистемыОСМИ

&НаСервере
Процедура СистемаВключенаПриИзмененииНаСервере()
	
	Если НЕ (СистемаВключена И
		ПроверкаКорректностиИнтеграции()) Тогда
		СистемаВключена = Ложь;
		СоединениеУспешно = Ложь;
	КонецЕсли;
	
	Константы.ОСМИ_ПодсистемаВключена.Установить(СистемаВключена);

	УстановкаВидимостиДоступности();
	
	ЗаписьЖурналаРегистрации("ОСМИ.Информация", УровеньЖурналаРегистрации.Информация,,,
		?(СистемаВключена, "Подсистема ОСМИ включена", "Подсистема ОСМИ отключена"));
		
КонецПроцедуры

&НаКлиенте
Процедура СистемаВключенаПриИзменении(Элемент)
	
	СистемаВключенаПриИзмененииНаСервере();

	Если СистемаВключена Тогда
		ПодключитьОбработчикОжидания("ПрочитатьСохраненныеНастройки", 0.1, Истина);
	КонецЕсли;

	ОбновитьИнтерфейс();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеHTTPСобытиями

&НаСервере
Процедура ЗаполнитьHTTPСобытия()
	
	HTTPСобытия.Очистить();
	
	СобытияОСМИ = ОСМИ_РаботаСAPI.ПолучитьСписокНастроенныхСобытиый();	
	
	Если СобытияОСМИ.Успех Тогда
		Массив = СобытияОСМИ.Ответ.Events;		
		Для Каждого Событие из Массив Цикл
			НовоеСобытие = HTTPСобытия.Добавить();
			НовоеСобытие.Метод  = Событие.method;
			НовоеСобытие.Адрес  = Событие.url;
			НовоеСобытие.Порт  = Событие.port;
			НовоеСобытие.ИмяПользователя  = Событие.user;
			НовоеСобытие.Пароль  = Событие.password;
			НовоеСобытие.Событие  = Событие.event;
		КонецЦикла;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура HTTPСобытияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.HTTPСобытия.ТекущиеДанные;
	
	Для Каждого HTTPСобытие Из HTTPСобытия Цикл
		Если HTTPСобытие.Событие = ТекущиеДанные.Событие И
			HTTPСобытия.Индекс(HTTPСобытие) <> HTTPСобытия.Индекс(ТекущиеДанные) Тогда
			ПоказатьПредупреждение(, "Для одного типа событий допускается установка только одного обработчика", 30, "Ошибка!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ (ЗначениеЗаполнено(ТекущиеДанные.Метод) И
		ЗначениеЗаполнено(ТекущиеДанные.Адрес) И
		ЗначениеЗаполнено(ТекущиеДанные.Событие)) Тогда
		ПоказатьПредупреждение(, "Не полностью указаны параметры обработчика события", 30, "Ошибка!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура HTTPСобытияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.HTTPСобытия.ТекущиеДанные;
	
	Результат = ОСМИ_РаботаСAPI.УстановитьОбработчикСобытия(ТекущиеДанные.Метод, ТекущиеДанные.Адрес, ТекущиеДанные.ИмяПользователя,
		ТекущиеДанные.Пароль, ТекущиеДанные.Порт, ТекущиеДанные.Событие);
		
	Если НЕ Результат.Успех Тогда
		ПоказатьПредупреждение(, "Не удалось зарегистрировать HTTP-обработчик события на сервисе ОСМИ", 60,
			"Ошибка!");
		ПодключитьОбработчикОжидания("ОбновитьПереченьHTTPСобытий", 0.1, Истина);
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура HTTPСобытияПередУдалением(Элемент, Отказ)

	Результат = ОСМИ_РаботаСAPI.УдалитьОбработчикСобытия(Элементы.HTTPСобытия.ТекущиеДанные.Событие);
		
	Если НЕ Результат.Успех Тогда
		ПоказатьПредупреждение(, "Не удалось удалить HTTP-обработчик события на сервисе ОСМИ", 60,
			"Ошибка!");
		ПодключитьОбработчикОжидания("ОбновитьПереченьHTTPСобытий", 0.1, Истина);
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПереченьHTTPСобытий() Экспорт
	
	ЗаполнитьHTTPСобытия();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаКлючаИнформационнойСистемы

&НаКлиенте
Процедура ОбновитьКлючИнформационнойСистемы(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьКлючИнформационнойСистемыЗавершение", ЭтаФорма),
		"Вы убедились, что данная информационная база не является копией рабочей информационной системы?
		|Работа нескольких (разных) копий информационных баз с одним аккаунтом ОСМИ, как правило,
		|приводит к коллизиям и расхождениям в данных между сервисом ОСМИ и базами 1С
		|
		|Пожалуйста, убедитесь еще раз!
		|Текущая строка подключения к информационной базе: " + СтрокаСоединенияИнформационнойБазы() + "
		|
		|Продолжить обновление ключа информационной системы?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,
		"Внимание!!! Критическая операция!!!", КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКлючИнформационнойСистемыЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОСМИ_ОбщиеСервер.ЗаписатьКлючИнформационнойСистемы();
	
	УстановкаВидимостиДоступности();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеКартинками

&НаСервереБезКонтекста
Функция КартинкиПриАктивизацииСтрокиНаСервере(КодКартинки)

	Возврат Справочники.ОСМИ_Картинки.НайтиПоКоду(КодКартинки).ПолучитьОбъект().ПолучитьСтрокуПредосмотра();
	
КонецФункции

&НаКлиенте
Процедура КартинкиПриАктивизацииСтроки(Элемент)
	
	Попытка
		Предосмотр = КартинкиПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.Код);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКартинкиНаСервере()

	СписокКартинок = ОСМИ_РаботаСAPI.ПолучитьСписокДоступныхГрафическихФайлов();
	Если СписокКартинок.Успех Тогда
		Для Каждого Картинка Из СписокКартинок.Ответ.images Цикл
			НайденнаяКартинка = Справочники.ОСМИ_Картинки.НайтиПоКоду(Картинка.ImgID);
			Если НайденнаяКартинка = Неопределено ИЛИ
				НайденнаяКартинка = Справочники.ОСМИ_Картинки.ПустаяСсылка() Тогда 
				НоваяКартинка = Справочники.ОСМИ_Картинки.СоздатьЭлемент();
				НоваяКартинка.Наименование = Картинка.ImgDescription;
				НоваяКартинка.Код = Картинка.ImgID;
				НоваяКартинка.ТипКартинки = Перечисления.ОСМИ_ТипыКартинок[Картинка.imgType];
				НоваяКартинка.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинки(Команда)

	ЗагрузитьКартинкиНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПроверкаКорректностиИнтеграции()
	
	Если Метаданные.ОпределяемыеТипы.ОСМИ_ДисконтнаяКарта.Тип = 
		Новый ОписаниеТипов("СправочникСсылка.ОСМИ_Тест") И
		НЕ Константы.ОСМИ_СервисныйРежим.Получить() Тогда
		Элементы.ДекорацияОшибкаИнтеграции.Видимость = Истина;
		Возврат Ложь;
	Иначе
		Элементы.ДекорацияОшибкаИнтеграции.Видимость = Ложь;
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПрочитатьСохраненныеНастройки() Экспорт
	
	СоединениеУспешно = ОСМИ_РаботаСAPI.ПроверитьПодключениеКСервису().Успех;
	
	ПрочитатьСохраненныеНастройкиНаСервере();
	УстановкаВидимостиДоступности();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСохраненныеНастройкиНаСервере()
	
	ШаблонПоУмолчанию = Константы.ОСМИ_ШаблонПоУмолчанию.Получить();
	EmailАдминистратора = Константы.ОСМИ_EmailАдминистратора.Получить();

	APIID = Константы.ОСМИ_APIID.Получить();
    APIKEY = Константы.ОСМИ_APIKEY.Получить();
	APIADDR = Константы.ОСМИ_APIADDR.Получить();
	ИспользоватьСертификат = Константы.ОСМИ_ИспользоватьСертификат.Получить();
	РасположениеСертификата = Константы.ОСМИ_РасположениеСертификата.Получить();
	ПарольОтСертификата = Константы.ОСМИ_ПарольОтСертификата.Получить();
		
КонецПроцедуры

&НаСервере
Процедура УстановкаВидимостиДоступности()

	Элементы.СистемаВключена.Заголовок = ?(СистемаВключена, "Интеграция с системой ОСМИ включена",
		"Интеграция с системой ОСМИ выключена");
	Элементы.СистемаВключена.ЦветТекстаЗаголовка = ?(СистемаВключена, WebЦвета.ТемноЗеленый, WebЦвета.Красный);
	
	Если НЕ СистемаВключена Тогда
		Элементы.СтраницыНастроек.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаНастройкиСоединения.Видимость = Ложь;
		Элементы.ГруппаКлючИнформационнойСистемы.Видимость = Ложь;
	Иначе
		
		Элементы.ГруппаНастройкиСоединения.Видимость = Истина;

		Элементы.ГруппаКлючИнформационнойСистемы.Видимость = НЕ ОСМИ_ОбщиеСервер.ПроверитьКлючИнформационнойСистемы();
		
		Если НЕ СоединениеУспешно ИЛИ
			МодифицированыНастройкиСоединения Тогда
			Элементы.СтраницыНастроек.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Иначе
			Элементы.СтраницыНастроек.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
		КонецЕсли;

		Элементы.APIID.Видимость = НЕ ИспользоватьСертификат;
		Элементы.APIKEY.Видимость = НЕ ИспользоватьСертификат;
		Элементы.ПарольОтСертификата.Видимость = ИспользоватьСертификат;
		Элементы.РасположениеСертификата.Видимость = ИспользоватьСертификат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОСМИНаСервере()
	
	Константы.ОСМИ_EmailАдминистратора.Установить(EmailАдминистратора);
	Константы.ОСМИ_ШаблонПоУмолчанию.Установить(ШаблонПоУмолчанию);
	
	СохранитьНастройкиСоединенияОСМИНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСоединенияОСМИНаСервере()
	
	Константы.ОСМИ_APIID.Установить(APIID);
    Константы.ОСМИ_APIKEY.Установить(APIKEY);
	Константы.ОСМИ_APIADDR.Установить(APIADDR);
	Константы.ОСМИ_ИспользоватьСертификат.Установить(ИспользоватьСертификат);
	Константы.ОСМИ_РасположениеСертификата.Установить(РасположениеСертификата);
	Константы.ОСМИ_ПарольОтСертификата.Установить(ПарольОтСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиОСМИ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ
		Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		СохранитьНастройкиОСМИНаСервере();
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиСоединенияОСМИ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ
		Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиСоединенияОСМИНаСервере();
	
	МодифицированыНастройкиСоединения = Ложь;
	СоединениеУспешно = ОСМИ_РаботаСAPI.ПроверитьПодключениеКСервису().Успех;

	УстановкаВидимостиДоступности();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаСоединения

&НаКлиенте
Процедура СохранитьНастройкиСоединения(Команда)

	СохранитьНастройкиСоединенияОСМИНаСервере();
	
	МодифицированыНастройкиСоединения = Ложь;
	СоединениеУспешно = ОСМИ_РаботаСAPI.ПроверитьПодключениеКСервису().Успех;

	УстановкаВидимостиДоступности();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоединение(Команда)
	
	Пинг = ОСМИ_РаботаСAPI.ПроверитьПодключениеКСервису(Новый Структура(
				"APIID, APIKEY, APIADDR, ИспользоватьСертификат, ПутьКСертификату, ПарольСертификата",
				APIID, APIKEY, APIADDR,	ИспользоватьСертификат, РасположениеСертификата, ПарольОтСертификата));
	
	Если (НЕ СоединениеУспешно ИЛИ
		МодифицированыНастройкиСоединения) И
		Пинг.Успех Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьНастройкиСоединенияОСМИ", ЭтаФорма),
			"Сохранить настройки соединения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,
			"Соединение установлено!", КодВозвратаДиалога.Нет);
	Иначе
		ПоказатьПредупреждение(, ?(Пинг.Успех, "Соединение установлено", "Соединение не установлено"), 60, "Информация");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНаСертификат(Команда)

	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОтправитьЗапросНаСертификатНажатиеЗавершение", ЭтотОбъект),
		"mailto:support@osmicards.com?Subject=SSL%20Request&Body=Прошу предоставить клиентский сертификат для работы с сервисом ОСМИ.");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНаСертификатНажатиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт	

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСертификатПриИзменении(Элемент)
	
	УстановкаВидимостиДоступности();
	МодифицированыНастройкиСоединения = Истина;
	УстановкаВидимостиДоступности();
	
КонецПроцедуры

&НаКлиенте
Процедура APIADDRПриИзменении(Элемент)
	
	APIADDR = СокрЛП(APIADDR);
	МодифицированыНастройкиСоединения = Истина;
	УстановкаВидимостиДоступности();
	
КонецПроцедуры

&НаКлиенте
Процедура APIIDПриИзменении(Элемент)
	
	APIID = СокрЛП(APIID);
	МодифицированыНастройкиСоединения = Истина;
	УстановкаВидимостиДоступности();
	
КонецПроцедуры

&НаКлиенте
Процедура APIKEYПриИзменении(Элемент)
	
	МодифицированыНастройкиСоединения = Истина;
	УстановкаВидимостиДоступности();
	Если СокрЛП(APIKEY) <> APIKEY Тогда
		ПоказатьПредупреждение(, "Использование символов Пробела в начале и/или окончании пароля недопустимо!"
			"Символы Пробела удалены", 60, "Внимание!");
		APIKEY = СокрЛП(APIKEY);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольОтСертификатаПриИзменении(Элемент)

	МодифицированыНастройкиСоединения = Истина;
	УстановкаВидимостиДоступности();
	Если СокрЛП(ПарольОтСертификата) <> ПарольОтСертификата Тогда
		ПоказатьПредупреждение(, "Использование символов Пробела в начале и/или окончании пароля недопустимо!"
			"Символы Пробела удалены", 60, "Внимание!");
		ПарольОтСертификата = СокрЛП(ПарольОтСертификата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасположениеСертификатаПриИзменении(Элемент)
	
	РасположениеСертификата = СокрЛП(РасположениеСертификата);
	МодифицированыНастройкиСоединения = Истина;
	УстановкаВидимостиДоступности();

КонецПроцедуры

&НаКлиенте
Процедура РасположениеСертификатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Сертификат (*.pfx)|*.pfx";
	Диалог.Заголовок = "Укажите файл сертификата";                                         
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ИндексФильтра = 0;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Показать(Новый ОписаниеОповещения("РасположениеСертификатаНачалоВыбораЗавершение",
		ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура РасположениеСертификатаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		РасположениеСертификата = ВыбранныеФайлы[0];	
		МодифицированыНастройкиСоединения = Истина;
		УстановкаВидимостиДоступности()
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
