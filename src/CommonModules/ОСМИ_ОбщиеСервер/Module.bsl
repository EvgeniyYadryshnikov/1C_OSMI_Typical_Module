// Получить электронную карту
//
// Параметры:
//  ДисконтнаяКарта	- ОпределяемыйТип.ОСМИ_ДисконтнаяКарта - Карта 1С
//  ТолькоПоследняя - Булево - Признак возврата последней зарегистрированной электронной карты (по дате регистрации)
// 
// Возвращаемое значение:
//  СправочникСсылка.ОСМИ_ЭлектронныеКарты - Электронная карта ОСМИ.
//
Функция ПолучитьЭлектроннуюКарту(ДисконтнаяКарта, ТолькоПоследняя = Истина) Экспорт
	
	Если ТолькоПоследняя Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	СоответствиеКарт.ЭлектроннаяКарта КАК ЭлектроннаяКарта
		                      |ИЗ
		                      |	РегистрСведений.ОСМИ_СоответствиеКарт КАК СоответствиеКарт
		                      |ГДЕ
		                      |	СоответствиеКарт.ОбъектБазы = &Ссылка
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	СоответствиеКарт.ДатаРегистрации УБЫВ"); 

		Запрос.УстановитьПараметр("Ссылка", ДисконтнаяКарта);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			Возврат Выборка.ЭлектроннаяКарта;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СоответствиеКарт.ЭлектроннаяКарта КАК ЭлектроннаяКарта
		                      |ИЗ
		                      |	РегистрСведений.ОСМИ_СоответствиеКарт КАК СоответствиеКарт
		                      |ГДЕ
		                      |	СоответствиеКарт.ОбъектБазы = &Ссылка");

		Запрос.УстановитьПараметр("Ссылка", ДисконтнаяКарта);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		Иначе
			Возврат Результат.Выгрузить().ВыгрузитьКолонку("ЭлектроннаяКарта");
		КонецЕсли;
		
	КонецЕсли;

КонецФункции
	
// Функция - Получить карту 1С
//
// Параметры:
//  ЭлектроннаяКарта - СправочникСсылка.ОСМИ_ЭлектронныеКарты - Карта ОСМИ
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОСМИ_ДисконтнаяКарта - Ссылка на дисконтную карту системы
//
Функция Получить1СКарту(ЭлектроннаяКарта) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	СоответствиеКарт.ОбъектБазы КАК ОбъектБазы
	                      |ИЗ
	                      |	РегистрСведений.ОСМИ_СоответствиеКарт КАК СоответствиеКарт
	                      |ГДЕ
	                      |	СоответствиеКарт.ЭлектроннаяКарта = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ЭлектроннаяКарта);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ОбъектБазы;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
	
// Проверить соответствие полей шаблонов карт
// 
// Возвращаемое значение:
//  Массив - Массив ошибок в шабонах, хранимых в 1С.
//
Функция ПроверитьСоответствиеПолейШаблоновКарт() Экспорт
	
	СписокШаблонов = ОСМИ_РаботаСAPI.ЗапроситьСписокДоступныхШаблонов();
	Если НЕ СписокШаблонов.Успех Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокШаблоновОшибки = Новый Массив;
	
	Для Каждого Шаблон Из СписокШаблонов.Ответ.templates Цикл
		
		ШаблонСпр = Справочники.ОСМИ_ШаблоныЭлектронныхКарт.НайтиПоНаименованию(Шаблон, Истина);
		Если ШаблонСпр.Пустая() Тогда
			сОшибка = Новый Структура;
			сОшибка.Вставить("ИмяШаблона", Шаблон);
			сОшибка.Вставить("Ошибка", "Шаблон """+Шаблон+""" в 1С не найден");
			СписокШаблоновОшибки.Добавить(сОшибка);
		КонецЕсли;
			
		ДанныеШаблона = ОСМИ_РаботаСAPI.ЗапроситьИнформациюОШаблоне(Шаблон);
		Если НЕ ДанныеШаблона.Успех Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МассивПолей = ДанныеШаблона.Ответ.values;
		МассивПолей1С = ШаблонСпр.ПоляШаблона;
		сПоиск = Новый Структура("Имя");
		ЕстьОшибки = Ложь;
		Для Каждого Поле Из МассивПолей Цикл
			
			сПоиск.Имя = Поле.label;
			
			Найдено = МассивПолей1С.НайтиСтроки(сПоиск);
			Если НЕ Найдено.Количество() = 1 Тогда
				сОшибка = Новый Структура;
				сОшибка.Вставить("ИмяШаблона", Шаблон);
				сОшибка.Вставить("Ошибка", "В шаблоне """+Шаблон+""" имеется рассогласование полей");
				СписокШаблоновОшибки.Добавить(сОшибка);
				ЕстьОшибки = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Поле1С Из МассивПолей1С Цикл
			
			ПолеЕсть = Ложь;
			
			Для Каждого Поле Из МассивПолей Цикл
				Если Поле1С.Имя = Поле.label Тогда
					ПолеЕсть = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ПолеЕсть Тогда
				сОшибка = Новый Структура;
				сОшибка.Вставить("ИмяШаблона", Шаблон);
				сОшибка.Вставить("Ошибка", "В шаблоне """+Шаблон+""" имеется рассогласование полей");
				СписокШаблоновОшибки.Добавить(сОшибка);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокШаблоновОшибки;			   
	
КонецФункции

Функция УТФвСтроку(ВхСтр) Экспорт
    ВыхСтр="";      
    поз=1; 
    Пока поз<=СтрДлина(ВхСтр) Цикл
        симв=Сред(ВхСтр,поз,1);
        Если симв="\" И Сред(ВхСтр,поз+1,1)="u" Тогда
           поз=поз+2;
           Вес=4096;
           ВыхКод=0;
           Для п=0 По 3 Цикл
               кодСимв=КодСимвола(ВхСтр,поз+п);
               Если кодСимв>96 Тогда // a-f
                  кодСимв=кодСимв-87;
               ИначеЕсли кодСимв>64 Тогда // A-F
                  кодСимв=кодСимв-55;
               Иначе
                  кодСимв=кодСимв-48; // 0-9
              КонецЕсли;
              ВыхКод=ВыхКод+кодСимв*Вес;
              Вес=Вес/16;
          КонецЦикла;
          ВыхСтр=ВыхСтр+Символ(ВыхКод);
          поз=поз+4;
        Иначе
           ВыхСтр=ВыхСтр+симв;
           поз=поз+1;
        КонецЕсли;
    КонецЦикла;
    Возврат ВыхСтр;
КонецФункции

Функция RegEx(Строка, Фасет) экспорт
	// http://infostart.ru/public/464971/
    Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
                "<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
                |<package targetNamespace=""sample-my-package"">
                |<valueType name=""testtypes"" base=""xs:string"">
                |<pattern>" + Фасет + "</pattern>
                |</valueType>
                |<objectType name=""TestObj"">
                |<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
                |</objectType>
                |</package>
                |</Model>");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
    Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));

    Попытка
        Тест.TestItem = Строка;
        Возврат Истина
    Исключение
        Возврат Ложь
    КонецПопытки;
    
КонецФункции

Функция ФункцияВосстановления(Значение) Экспорт
	Если RegEx(Значение,"[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[Z]") тогда		
		Возврат                    
		МестноеВремя(
		Дата(
		СтрЗаменить(
			СтрЗаменить(
				СтрЗаменить(
					СтрЗаменить(
						СтрЗаменить(
							Значение," ",""
									)
								,":",""
								)
							,"-",""
							) 
						,"T",""
						)
					,"Z",""
					)
				)
			);
	ИначеЕсли Найти(Значение,"\u") > 0 Тогда
		Возврат УТФвСтроку(Значение);
	КонецЕсли;
	Возврат Значение		
КонецФункции

Функция ПолучитьТелефонДляКарты1С(Карта1С) Экспорт
	
	Возврат Справочники.ОСМИ_ИсточникиДанных.Телефон.ПолучитьОбъект().ПолучитьЗначениеПоля(Карта1С);
	
КонецФункции

Функция ПолучитьEmailДляКарты1С(Карта1С) Экспорт
	
	Возврат Справочники.ОСМИ_ИсточникиДанных.ЭлектроннаяПочта.ПолучитьОбъект().ПолучитьЗначениеПоля(Карта1С);
	
КонецФункции

Функция ПолучитьБаркодДляКарты1С(Карта1С) Экспорт
	
	Возврат Справочники.ОСМИ_ИсточникиДанных.Штрихкод.ПолучитьОбъект().ПолучитьЗначениеПоля(Карта1С);
	
КонецФункции

Функция ПолучитьТелефонДляЭлектроннойКарты(ЭлектроннаяКарта) Экспорт
	
	Карта1С = Получить1СКарту(ЭлектроннаяКарта);
	
	Если Карта1С = Неопределено Тогда
		Возврат "<не установлен>";
	Иначе
		Телефон = ПолучитьТелефонДляКарты1С(Карта1С);
		Если ЗначениеЗаполнено(Телефон) Тогда
			Возврат Телефон;
		Иначе
			Возврат "<не установлен>";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьEmailДляЭлектроннойКарты(ЭлектроннаяКарта) Экспорт
	
	Карта1С = Получить1СКарту(ЭлектроннаяКарта);
	
	Если Карта1С = Неопределено Тогда
		Возврат "<не установлен>";
	Иначе
		АдресЭП = ПолучитьEmailДляКарты1С(Карта1С);
		Если ЗначениеЗаполнено(АдресЭП) Тогда
			Возврат АдресЭП;
		Иначе
			Возврат "<не установлен>";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
	
Функция ПолучитьБаркодДляЭлектроннойКарты(ЭлектроннаяКарта) Экспорт
	
	Карта1С = Получить1СКарту(ЭлектроннаяКарта);
	
	Если Карта1С = Неопределено Тогда
		Возврат "<не установлен>";
	Иначе
		Баркод = ПолучитьБаркодДляКарты1С(Карта1С);
		Если ЗначениеЗаполнено(Баркод) Тогда
			Возврат Баркод;
		Иначе
			Возврат "<не установлен>";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСерийныйНомерКартыОСМИ(КартаОСМИ) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОСМИ_ЭлектронныеКарты.Код КАК Код
	                      |ИЗ
	                      |	Справочник.ОСМИ_ЭлектронныеКарты КАК ОСМИ_ЭлектронныеКарты
	                      |ГДЕ
	                      |	ОСМИ_ЭлектронныеКарты.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", КартаОСМИ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Код;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ЗарегистрироватьОшибкуОСМИ(ТекстОшибки, СсылкаНаОбъект = Неопределено, ВыводитьСообщениеПользователю = Истина) Экспорт
	
	ЗаписьЖурналаРегистрации("ОСМИ.Ошибка", УровеньЖурналаРегистрации.Ошибка,, СсылкаНаОбъект, ТекстОшибки);
	Если ВыводитьСообщениеПользователю Тогда
		Сообщить(ТекстОшибки);
	КонецЕсли;
		
КонецПроцедуры

#Область РаботаСТекстомОповещения

Функция ПолучитьТекстОповещенияДляОтправкиКартыПоSMS(КартаОСМИ) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Шаблоны.ТестОповещенияПриОтправкеКартыПоSMS КАК ТестОповещения
	                      |ИЗ
	                      |	Справочник.ОСМИ_ЭлектронныеКарты КАК ЭлектронныеКарты
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОСМИ_ШаблоныЭлектронныхКарт КАК Шаблоны
	                      |		ПО ЭлектронныеКарты.Шаблон = Шаблоны.Ссылка
	                      |ГДЕ
	                      |	ЭлектронныеКарты.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", КартаОСМИ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат СокрЛП(Выборка.ТестОповещения);
	Иначе
		Возврат ПолучитьТекстОповещенияДляОтправкиКартыПоSMSПоУмолчанию();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстОповещенияДляОтправкиКартыПоSMSПоУмолчанию() Экспорт
	
	Возврат "Ваша карта готова {link}";
	
КонецФункции

Функция ПолучитьТекстОповещенияДляОтправкиКартыПоEmail(КартаОСМИ) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Шаблоны.ТестОповещенияПриОтправкеКартыПоЭлектроннойПочте КАК ТестОповещения
	                      |ИЗ
	                      |	Справочник.ОСМИ_ЭлектронныеКарты КАК ЭлектронныеКарты
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОСМИ_ШаблоныЭлектронныхКарт КАК Шаблоны
	                      |		ПО ЭлектронныеКарты.Шаблон = Шаблоны.Ссылка
	                      |ГДЕ
	                      |	ЭлектронныеКарты.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", КартаОСМИ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат СокрЛП(Выборка.ТестОповещения);
	Иначе
		Возврат ПолучитьТекстОповещенияДляОтправкиКартыПоEmailПоУмолчанию();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстОповещенияДляОтправкиКартыПоEmailПоУмолчанию() Экспорт
	
	Возврат "Ваша электронная карта готова. Если вы открыли это письмо на своем мобильном телефоне, то Вы можете установить карту в приложение Wallet на iPhone или Pass2U на Android, нажав на иконку аттачмента, или загрузить ее пройдя по ссылке {link}";
	
КонецФункции

#КонецОбласти

#Область РаботаСКлючемИнформационнойСистемы

Функция СформироватьКлючИнформационнойСистемы() Экспорт
	
	ОбъектХеш = Новый ХешированиеДанных(ХешФункция.MD5); 
	ОбъектХеш.Добавить(СтрокаСоединенияИнформационнойБазы());
	Возврат СтрЗаменить(Строка(ОбъектХеш.ХешСумма), " ","");
	
КонецФункции

Функция ЗаписатьКлючИнформационнойСистемы() Экспорт
	
	ПараметрыСеанса.ОСМИ_КлючИнформационнойСистемы = СформироватьКлючИнформационнойСистемы();
	Константы.ОСМИ_КлючИнформационнойСистемы.Установить(ПараметрыСеанса.ОСМИ_КлючИнформационнойСистемы);
	
КонецФункции

Функция ПроверитьКлючИнформационнойСистемы() Экспорт
	
	Возврат ПараметрыСеанса.ОСМИ_КлючИнформационнойСистемы = ПараметрыСеанса.ОСМИ_ТекущийКлючИнформационнойСистемы;
	
КонецФункции

#КонецОбласти
